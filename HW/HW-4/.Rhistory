rm(list=ls())
demo <- T
require(MASS)
data("airquality")
require(data.table)
require(tidyverse)
raw     <- setDT(na.omit(airquality))[,-c("Day")]
raw$Month <- as.factor(raw$Month)
seed    <- 504737137
(n      <- nrow(raw) )
fmla <- Ozone ~ .
base.resid <- lm(fmla,data=raw)$residuals
if(demo){summary(lm(fmla,data=raw))}
set.seed(seed)
frac <- 0.1
tst <- sample(n,ceiling(frac*n))
m1  <- lm(fmla,data=raw[-tst,])
if(demo){summary(m1)}
cv.trn <- m1$fitted.values
if(demo){summary(cv.trn)}
cv.tst <- predict(m1,raw[tst,])
if(demo){summary(cv.tst)}
cv.resid <- raw$Ozone[tst]-cv.tst
if(demo){summary(cv.resid)}
fitPred <- function(trn,tst,i) {
m <- lm(fmla,data=trn)
y <- tst$Ozone
p <- predict(m,tst)
r <- y - p
return(data.table(idx=i,resid=r,y=y,yhat=p))
}
c2      <- data.table(grp=1:n, tst=1:n)
dt2     <- c2[,fitPred(raw[-tst,],raw[tst,],tst),by=.(grp)]
jk.resid      <- data.table(loc=dt2$idx,diff=dt2$resid)
set.seed(seed)
kf  <- 10
t       <- rep(1:kf,ceiling(n/kf))[1:n]
c3      <- data.table(k=t ,idx=sample(n))
dt3     <- c3[,fitPred(raw[-idx,],raw[idx,],idx),by=.(k)]
kf.resid      <- data.table(k=dt3$grp,loc=dt3$index,diff=dt3$resid)
system.time(na.omit(airquality))
system.time(airquality[rowSums(is.na(airquality)) == 0, ])
system.time(df<-na.omit(airquality))
system.time(df<-airquality[rowSums(is.na(airquality)) == 0, ])
system.time(df<-airquality[complete.cases(airquality), ])
rm(list=ls())
demo <- T
require(MASS)
data("airquality")
require(data.table)
require(tidyverse)
raw     <- setDT(na.omit(airquality))[,-c("Day")]
raw$Month <- as.factor(raw$Month)
seed    <- 504737137
(n      <- nrow(raw) )
fmla <- Ozone ~ .
base.resid <- lm(fmla,data=raw)$residuals
if(demo){summary(lm(fmla,data=raw))}
set.seed(seed)
frac <- 0.1
tst <- sample(n,ceiling(frac*n))
m1  <- lm(fmla,data=raw[-tst,])
if(demo){summary(m1)}
cv.trn <- m1$fitted.values
if(demo){summary(cv.trn)}
cv.tst <- predict(m1,raw[tst,])
if(demo){summary(cv.tst)}
cv.resid <- raw$Ozone[tst]-cv.tst
if(demo){summary(cv.resid)}
fitPred <- function(trn,tst,i) {
m <- lm(fmla,data=trn)
y <- tst$Ozone
p <- predict(m,tst)
r <- y - p
return(data.table(idx=i,resid=r,y=y,yhat=p))
}
c2      <- data.table(grp=1:n, tst=1:n)
dt2     <- c2[,fitPred(raw[-tst,],raw[tst,],tst),by=.(grp)]
jk.resid      <- data.table(loc=dt2$idx,diff=dt2$resid)
set.seed(seed)
kf  <- 10
t       <- rep(1:kf,ceiling(n/kf))[1:n]
c3      <- data.table(k=t ,idx=sample(n))
dt3     <- c3[,fitPred(raw[-idx,],raw[idx,],idx),by=.(k)]
kf.resid      <- data.table(k=dt3$grp,loc=dt3$index,diff=dt3$resid)
cv.resid <- data.table(loc=1:ceiling(frac*n),diff=raw$Ozone[tst]-cv.tst)
cv.resid
rm(list=ls())
demo <- T
require(MASS)
data("airquality")
require(data.table)
require(tidyverse)
# convert to data.table
raw     <- setDT(na.omit(airquality))[,-c("Day")]
raw$Month <- as.factor(raw$Month)
seed    <- 504737137
(n      <- nrow(raw) )
fmla <- Ozone ~ .
base.resid <- lm(fmla,data=raw)$residuals
if(demo){summary(lm(fmla,data=raw))}
set.seed(seed)
frac <- 0.1
tst <- sample(n,ceiling(frac*n))
m1  <- lm(fmla,data=raw[-tst,])
if(demo){summary(m1)}
cv.trn <- m1$fitted.values
if(demo){summary(cv.trn)}
cv.tst <- predict(m1,raw[tst,])
if(demo){summary(cv.tst)}
cv.resid <- data.table(loc=1:ceiling(frac*n),diff=raw$Ozone[tst]-cv.tst)
if(demo){summary(cv.resid)}
fitPred <- function(trn,tst,i) {
m <- lm(fmla,data=trn)
y <- tst$Ozone
p <- predict(m,tst)
r <- y - p
return(data.table(idx=i,resid=r,y=y,yhat=p))
}
c2      <- data.table(grp=1:n, tst=1:n)
dt2     <- c2[,fitPred(raw[-tst,],raw[tst,],tst),by=.(grp)]
jk.resid      <- data.table(loc=dt2$idx,diff=dt2$resid)
set.seed(seed)
kf  <- 10
t       <- rep(1:kf,ceiling(n/kf))[1:n]
c3      <- data.table(k=t ,idx=sample(n))
dt3     <- c3[,fitPred(raw[-idx,],raw[idx,],idx),by=.(k)]
kf.resid      <- data.table(k=dt3$grp,loc=dt3$index,diff=dt3$resid)
cv.resid
jk.resid
kf.resid
kf.resid <- data.table(k=dt3$grp,loc=dt3$index,diff=dt3$resid)
kf.resid
kf.resid <- data.table(k=dt3$grp)
kf.resid
dt3
kf.resid <- data.table(k=dt3$k,loc=dt3$idx,diff=dt3$resid)
kf.resid
dt3
dt2
rm(list=ls())
demo <- T
require(MASS)
data("airquality")
require(data.table)
require(tidyverse)
# convert to data.table
raw     <- setDT(na.omit(airquality))[,-c("Day")]
raw$Month <- as.factor(raw$Month)
seed    <- 504737137
(n      <- nrow(raw) )
fmla <- Ozone ~ .
base.resid <- lm(fmla,data=raw)$residuals
if(demo){summary(lm(fmla,data=raw))}
set.seed(seed)
frac <- 0.1
tst <- sample(n,ceiling(frac*n))
m1  <- lm(fmla,data=raw[-tst,])
if(demo){summary(m1)}
cv.trn <- m1$fitted.values
if(demo){summary(cv.trn)}
cv.tst <- predict(m1,raw[tst,])
if(demo){summary(cv.tst)}
cv.resid <- data.table(loc=1:ceiling(frac*n),diff=raw$Ozone[tst]-cv.tst)
if(demo){summary(cv.resid)}
fitPred <- function(trn,tst,i) {
m <- lm(fmla,data=trn)
y <- tst$Ozone
p <- predict(m,tst)
r <- y - p
return(data.table(idx=i,resid=r,y=y,yhat=p))
}
c2      <- data.table(grp=1:n, tst=1:n)
dt2     <- c2[,fitPred(raw[-tst,],raw[tst,],tst),by=.(grp)]
jk.resid      <- data.table(loc=dt2$idx,diff=dt2$resid)
set.seed(seed)
kf  <- 10
t       <- rep(1:kf,ceiling(n/kf))[1:n]
c3      <- data.table(k=t ,idx=sample(n))
dt3     <- c3[,fitPred(raw[-idx,],raw[idx,],idx),by=.(k)]
kf.resid <- data.table(k=dt3$k,loc=dt3$idx,diff=dt3$resid)
if(demo){summary(cv.resid)}
if(demo){summary(jk.resid)}
if(demo){summary(kf.resid)}
setwd("c:/data/BUAN6357/HW_4"); source("prep.txt", echo=T)
rm(list=ls())
demo <- T
require(MASS)
data("airquality")
require(data.table)
require(tidyverse)
# convert to data.table
raw     <- setDT(na.omit(airquality))[,-c("Day")]
raw$Month <- as.factor(raw$Month)
seed    <- 504737137
(n      <- nrow(raw) )
fmla <- Ozone ~ .
base.resid <- lm(fmla,data=raw)$residuals
if(demo){summary(lm(fmla,data=raw))}
set.seed(seed)
frac <- 0.1
tst <- sample(n,ceiling(frac*n))
m1  <- lm(fmla,data=raw[-tst,])
if(demo){summary(m1)}
cv.trn <- m1$fitted.values
if(demo){summary(cv.trn)}
cv.tst <- predict(m1,raw[tst,])
if(demo){summary(cv.tst)}
cv.resid <- data.table(loc=1:ceiling(frac*n),diff=raw$Ozone[tst]-cv.tst)
if(demo){summary(cv.resid)}
fitPred <- function(trn,tst,i) {
m <- lm(fmla,data=trn)
y <- tst$Ozone
p <- predict(m,tst)
r <- y - p
return(data.table(idx=i,resid=r,y=y,yhat=p))
}
c2      <- data.table(grp=1:n, tst=1:n)
dt2     <- c2[,fitPred(raw[-tst,],raw[tst,],tst),by=.(grp)]
jk.resid      <- data.table(loc=dt2$idx,diff=dt2$resid)
if(demo){summary(jk.resid)}
set.seed(seed)
kf  <- 10
t       <- rep(1:kf,ceiling(n/kf))[1:n]
c3      <- data.table(k=t ,idx=sample(n))
dt3     <- c3[,fitPred(raw[-idx,],raw[idx,],idx),by=.(k)]
kf.resid <- data.table(k=dt3$k,loc=dt3$idx,diff=dt3$resid)
if(demo){summary(kf.resid)}
q()
rm(list=ls())
demo <- T
require(MASS)
data("airquality")
require(data.table)
raw     <- setDT(na.omit(airquality))[,-c("Day")]
raw$Month <- as.factor(raw$Month)
seed    <- 504737137
(n      <- nrow(raw) )
fmla <- Ozone ~ .
base.resid <- lm(fmla,data=raw)$residuals
if(demo){summary(lm(fmla,data=raw))}
set.seed(seed)
frac <- 0.1
tst <- sample(n,ceiling(frac*n))
m1  <- lm(fmla,data=raw[-tst,])
if(demo){summary(m1)}
cv.trn <- m1$fitted.values
if(demo){summary(cv.trn)}
cv.tst <- predict(m1,raw[tst,])
if(demo){summary(cv.tst)}
cv.resid <- data.table(loc=tst,diff=raw$Ozone[tst]-cv.tst)
if(demo){summary(cv.resid)}
fitPred <- function(trn,tst,i) {
m <- lm(fmla,data=trn)
y <- tst$Ozone
p <- predict(m,tst)
r <- y - p
return(data.table(idx=i,resid=r,y=y,yhat=p))
}
c2      <- data.table(grp=1:n, tst=1:n)
dt2     <- c2[,fitPred(raw[-tst,],raw[tst,],tst),by=.(grp)]
jk.resid      <- data.table(loc=dt2$idx,diff=dt2$resid)
if(demo){summary(jk.resid)}
set.seed(seed)
kf  <- 10
t       <- rep(1:kf,ceiling(n/kf))[1:n]
c3      <- data.table(k=t ,idx=sample(n))
dt3     <- c3[,fitPred(raw[-idx,],raw[idx,],idx),by=.(k)]
kf.resid <- data.table(k=dt3$k,loc=dt3$idx,diff=dt3$resid)
if(demo){summary(kf.resid)}
install.packages("installr")
q()
library(tidyverse)
library(tidyverse)
install.packages("quantmod")
require(data.table)
bbb <- fread("~/Library/Mobile Documents/com~apple~CloudDocs/School Work/Sem 2/BUAN 6337/BUAN_6337_Predictive_Analysis/HW/HW-4/BBB.csv",
na.strings = c("NA", ""),
sep = "auto",
stringsAsFactors = FALSE,
data.table = TRUE,)
summary(bbb)
bbb[,gender := ifelse(bbb$gender == "M",1,0)]
bbb[,buyer := ifelse(bbb$buyer == "yes",1,0)]
fmla <- buyer ~ last + total_ + gender + child + youth + cook + do_it + reference + art + geog
logit <- glm(fmla, data = bbb,family= binomial(link="logit"))
bbb[, prob := predict(logit,type = "response")]
head(bbb)
summary(logit)
library(dplyr)
bbb[,decile := ntile(1 - bbb$prob,10)]
bbb[,bucket := paste("Bucket ",as.character(decile))]
response_rates=bbb[,mean(buyer),by=decile]
barplot(V1~decile,data=response_rates)
results <- bbb[, .(num_cust = .N, num_buy = sum(buyer), resp_rate = sum(buyer) / .N), by = decile]
head(results)
dt <- bbb[, c("buyer","total_", "last", "child", "youth", "cook", "do_it", "reference", "art", "geog","prob")]
# assign each customer to a decile based on predicted probability of purchase
dt[, decile := ntile(1 - prob, 10)]
# summarize average values by decile
results2 <- dt[, .(total = summarise_(total_), last = mean(last),
child = mean(child), avg_youth = mean(youth),
avg_cook = mean(cook), avg_do_it = mean(do_it),
avg_reference = mean(reference), avg_art = mean(art),
avg_geog = mean(geog)),
by = decile]
results2 <- describe(dt)
require(psych)
results2 <- describe(dt)
results2
# summarize average values by decile
results2 <- dt[,describe(),by=decile]
# summarize average values by decile
results2 <- describe.by(dt,dt$decile)
# summarize average values by decile
results2 <- describeBy(dt,dt$decile)
results2
str(results2)
dt
hist(prob~decile,data = dt)
?hist
boxplot(prob~decile,data = dt)
avg_bbb <- bbb[, .(avg_total = mean(total_), avg_last = mean(last),
avg_child = mean(child), avg_youth = mean(youth),
avg_cook = mean(cook), avg_do_it = mean(do_it),
avg_reference = mean(reference), avg_art = mean(art),
avg_geog = mean(geog)),
by = decile]
hist(avg_bbb)
avg_bbb <- bbb[, .(avg_total = mean(total_), avg_last = mean(last),
avg_child = mean(child), avg_youth = mean(youth),
avg_cook = mean(cook), avg_do_it = mean(do_it),
avg_reference = mean(reference), avg_art = mean(art),
avg_geog = mean(geog)),
by = decile]
avg_bbb
# summarize average values by decile
results2 <- describeBy(bbb,bbb$decile)
results2
bbb
library(ggplot2)
library(GGally)
ggpairs(bbb)
pairs(bbb)
pairs(bbb)
?pairs
```{r}
library(graphics)
pairs(bbb)
ggpairs(bbb)
ggpairs(bbb,
aes(color = decile,
alpha = 0.5))
bbb[,decile := as.factor(decile)]
ggpairs(bbb,
aes(color = decile,
alpha = 0.5))
remove.packages("fastmap", lib="~/Library/R/arm64/4.2/library")
install.packages("fastmap")
bbb[,decile := factor(decile,levels = c(1:10))]
require(data.table)
bbb <- fread("~/Library/Mobile Documents/com~apple~CloudDocs/School Work/Sem 2/BUAN 6337/BUAN_6337_Predictive_Analysis/HW/HW-4/BBB.csv",
na.strings = c("NA", ""),
sep = "auto",
stringsAsFactors = FALSE,
data.table = TRUE,)
summary(bbb)
bbb[,gender := ifelse(bbb$gender == "M",1,0)]
bbb[,buyer := ifelse(bbb$buyer == "yes",1,0)]
fmla <- buyer ~ last + total_ + gender + child + youth + cook + do_it + reference + art + geog
logit <- glm(fmla, data = bbb,family= binomial(link="logit"))
bbb[, prob := predict(logit,type = "response")]
head(bbb)
summary(logit)
library(dplyr)
bbb[,decile := ntile(1 - bbb$prob,10)]
bbb[,bucket := paste("Bucket ",as.character(decile))]
response_rates=bbb[,mean(buyer),by=decile]
barplot(V1~decile,data=response_rates)
results <- bbb[, .(num_cust = .N, num_buy = sum(buyer), resp_rate = sum(buyer) / .N), by = decile]
head(results)
avg_bbb <- bbb[, .(avg_total = mean(total_), avg_last = mean(last),
avg_child = mean(child), avg_youth = mean(youth),
avg_cook = mean(cook), avg_do_it = mean(do_it),
avg_reference = mean(reference), avg_art = mean(art),
avg_geog = mean(geog)),
by = decile]
avg_bbb
# summarize average values by decile
require(psych)
results2 <- describeBy(bbb,bbb$decile)
results2
require(ggplot2)
require(GGally)
bbb[,decile := factor(decile,levels = c(1:10))]
# calculate breakeven response rate
revenue_per_customer <- 18 - 9 - 3
breakeven_cost_per_response <- 0.5 / revenue_per_customer
breakeven_response_rate <- breakeven_cost_per_response * 100
breakeven_response_rate
# create new variable "mailto_logit"
bbb[, mailto_logit := ifelse(prob >= breakeven_cost_per_response, 1, 0)]
bbb
# calculate number of customers to receive offer
num_customers <- sum(bbb$mailto_logit)
num_customers
# calculate response rate among those who receive offer
response_rate <- mean(bbb$buyer[bbb$mailto_logit == 1])
response_rate
# calculate expected profit from campaign
expected_profit <- num_customers * (18 - 9 - 3 - 0.5)
expected_profit
# calculate expected number of buyers in roll-out group
expected_num_buyers <- num_customers * (mean(bbb$buyer[bbb$mailto_logit == 1]) / mean(bbb$mailto_logit))
expected_num_buyers_rollout <- expected_num_buyers * 10
expected_num_buyers_rollout
bbb
ggpairs(bbb,columns = 1:4,aes(color = decile))
str(bbb)
ggpairs(bbb,columns =c("total_","last","child","youth","cook","do_it","reference","art","geog"),aes(color = decile))
require(ggplot2)
require(GGally)
bbb[,decile := factor(decile,levels = c(1:10))]
ggpairs(bbb,columns =c("total_","last","child","youth","cook","do_it","reference","art","geog"),aes(color = decile))
ggpairs(bbb,columns =c("total_","last","child","youth","cook","do_it","reference","art","geog"),aes(color = decile, alpha = 0.5))
str(bbb)
ggpairs(bbb,columns =c(7,9:),aes(color = decile, alpha = 0.5))
ggpairs(bbb,columns =7:12,aes(color = decile, alpha = 0.5))
bbb$decile
unique(bbb$decile)
plot(avg_bbb$decile,avg_bbb$avg_total)
plot(avg_bbb$decile,avg_bbb$avg_last)
plot(avg_bbb$decile,avg_bbb$avg_child)
plot(avg_bbb$decile,avg_bbb$avg_total)
plot(avg_bbb$decile,avg_bbb$avg_last)
plot(avg_bbb$decile,avg_bbb$avg_child)
plot(avg_bbb$decile,avg_bbb$avg_youth)
plot(avg_bbb$decile,avg_bbb$avg_cook)
?ply
?ploy
?plot
response_rates=bbb[,rr=mean(buyer),by=decile]
response_rates=bbb[,mean(buyer),by=decile]
barplot(V1~decile,data=response_rates)
response_rates=bbb[,rr:=mean(buyer),by=decile]
barplot(rr~decile,data=response_rates)
response_rates
response_rates=bbb[,mean(buyer),by=decile]
barplot(rr~decile,data=response_rates)
barplot(V1~decile,data=response_rates)
require(data.table)
bbb <- fread("~/Library/Mobile Documents/com~apple~CloudDocs/School Work/Sem 2/BUAN 6337/BUAN_6337_Predictive_Analysis/HW/HW-4/BBB.csv",
na.strings = c("NA", ""),
sep = "auto",
stringsAsFactors = FALSE,
data.table = TRUE,)
summary(bbb)
bbb[,gender := ifelse(bbb$gender == "M",1,0)]
bbb[,buyer := ifelse(bbb$buyer == "yes",1,0)]
fmla <- buyer ~ last + total_ + gender + child + youth + cook + do_it + reference + art + geog
logit <- glm(fmla, data = bbb,family= binomial(link="logit"))
bbb[, prob := predict(logit,type = "response")]
head(bbb)
summary(logit)
library(dplyr)
bbb[,decile := ntile(1 - bbb$prob,10)]
bbb[,bucket := paste("Bucket ",as.character(decile))]
response_rates=bbb[,mean(buyer),by=decile]
barplot(V1~decile,data=response_rates)
results <- bbb[, .(num_cust = .N, num_buy = sum(buyer), resp_rate = sum(buyer) / .N), by = decile]
head(results)
avg_bbb <- bbb[, .(avg_total = mean(total_), avg_last = mean(last),
avg_child = mean(child), avg_youth = mean(youth),
avg_cook = mean(cook), avg_do_it = mean(do_it),
avg_reference = mean(reference), avg_art = mean(art),
avg_geog = mean(geog)),
by = decile]
avg_bbb
# summarize average values by decile
require(psych)
results2 <- describeBy(bbb,bbb$decile)
bbb[,decile := factor(decile,levels = c(1:10))]
results2
plot(avg_bbb$decile,avg_bbb$avg_total,main = "Average price of purchase",xlab = "Deciles",ylab = "Average price")
plot(avg_bbb$decile,avg_bbb$avg_last,main = "Average number of months since most recent purchase",xlab = "Deciles",ylab = "Number of months since most recent purchase")
plot(avg_bbb$decile,avg_bbb$avg_child,main = "Average number of children's books purchased",xlab = "Deciles",ylab = "Average number of children's books purchased")
plot(avg_bbb$decile,avg_bbb$avg_youth,main = "Average number of youth books purchased",xlab = "Deciles",ylab = "Average number of youth books purchased")
plot(avg_bbb$decile,avg_bbb$avg_cook,main = "Average number of cook books purchased",xlab = "Deciles",ylab = "Average number of cook books purchased")
plot(avg_bbb$decile,avg_bbb$avg_do_it,main = "Average number of do ti books purchased",xlab = "Deciles",ylab = "Average number of do it books purchased")
plot(avg_bbb$decile,avg_bbb$avg_reference,main = "Average number of reference books purchased",xlab = "Deciles",ylab = "Average number of reference books purchased")
plot(avg_bbb$decile,avg_bbb$avg_art,main = "Average number of art books purchased",xlab = "Deciles",ylab = "Average number of art books purchased")
# calculate breakeven response rate
revenue_per_customer <- 18 - 9 - 3
breakeven_cost_per_response <- 0.5 / revenue_per_customer
breakeven_response_rate <- breakeven_cost_per_response * 100
breakeven_response_rate
# create new variable "mailto_logit"
bbb[, mailto_logit := ifelse(prob >= breakeven_cost_per_response, 1, 0)]
bbb
# calculate number of customers to receive offer
num_customers <- sum(bbb$mailto_logit)
num_customers
# calculate response rate among those who receive offer
response_rate <- mean(bbb$buyer[bbb$mailto_logit == 1])
response_rate
# calculate expected profit from campaign
expected_profit <- num_customers * (18 - 9 - 3 - 0.5)
expected_profit
# calculate expected number of buyers in roll-out group
expected_num_buyers <- num_customers * (mean(bbb$buyer[bbb$mailto_logit == 1]) / mean(bbb$mailto_logit))
expected_num_buyers_rollout <- expected_num_buyers * 10
expected_num_buyers_rollout
