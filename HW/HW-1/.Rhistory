summary(mBase)
predBase <- predict(mBase,wk[-tst,])
sqrt(mean(mBase$residuals^2))
# Removing all objects from R environment
rm(list=ls())
setwd("c:/data/BUAN6356/HW_2"); source("prep.txt", echo=T)
# install.packages(MASS)
library(MASS)
data(Boston)
wk <- Boston[complete.cases(Boston),]
seed <- 722538843
set.seed(seed)
sample_size <- 0.10
tNum<- ceiling(nrow(wk)*sample_size)
tst <- sample(nrow(wk),tNum)
mBase <- lm(medv~., data = wk[-tst,])
summary(mBase)
predBase <- predict(mBase,wk[-tst,])
# View(predBase)
sqrt(mean(mBase$residuals^2))
tStep$residual
tStep <-step(mBase)
summary(tStep)
predStep <- predict(tStep,wk[-tst,])
predStep$residual
tStep$residual
sqrt(mean(tStep$residuals^2))
summary(tStep)
predStep <- predict(tStep,wk[-tst,])
# View(predStep)
summary(predStep)
# View(predBase)
(mean(mBase$residuals^2))
(mean(tStep$residuals^2))
tstPredS <- predict(tStep,wk[tst,])
tstPredS$residual
tstErr   <- wk$medv[tst] - tstPredS      # residual <- actual - predicted
mean(tstErr^2)                                 # MSE: mean squared error
sqrt(mean(tstErr^2))
tstErr1   <- wk$medv[-tst] - predStep      # residual <- actual - predicted
mean(tstErr1^2)                                 # MSE: mean squared error
sqrt(mean(mBase$residuals^2))
pnorm(0.625)
pnorm(0.625,lower.tail = FALSE)
pnorm(0.025)
qnorm(0.025)
qnorm(0.025,lower.tail = FALSE)
?pnorm
pnorm(280,300,0.022,lower.tail = FALSE)
pnorm(120,521.74,58.464)
pnorm(120,521.74,58.464,lower.tail = FALSE)
pnorm(120,521.74,58.464)
pnorm(0.005,lower.tail = FALSE)
qnorm(0.005,lower.tail = FALSE)
qnorm(0.005,lower.tail = FALSE)
qnorm(0.005,lower.tail = FALSE)*0.15/0.0.25
qnorm(0.005,lower.tail = FALSE)*0.15/0.025
(qnorm(0.005,lower.tail = FALSE)*0.15/0.025)^2
#----------Critical Z values for different alpha--------------------------------
qnorm(.995) # \alpha = .01 => Z_.995
qnorm(.975) # \alpha = .05 => Z_.975
qnorm(.950) # \alpha = .1 => Z_.05
library(mailR)
sudo R CMD javareconf
library(mailR)
devtools::install_github("hadley/r4ds")
devtools::install_github("hadley/r4ds")
knitr::include_graphics("screenshots/rstudio-wg.png")
devtools::load_all("../minibook/"); process_book()
html <- list.files("oreilly", pattern = "[.]html$", full.names = TRUE)
file.copy(html, "../r-for-data-science-2e/", overwrite = TRUE)
pngs <- list.files("oreilly", pattern = "[.]png$", full.names = TRUE, recursive = TRUE)
dest <- gsub("oreilly", "../r-for-data-science-2e/", pngs)
fs::dir_create(unique(dirname(dest)))
file.copy(pngs, dest, overwrite = TRUE)
### Clear memory
rm(list=ls())
### Install packages
install.packages("data.table")
install.packages("ggplot2")
### Read required packages
library("data.table")
library("ggplot2")
### Mean of 100 absolute value of the N(0,1) random variable
mean(abs(rnorm(100,0,1)))
### Concatenate numbers as vector
x = c(1,2,4)
y = c(5,6,7)
x # print the values of x
class(x) # Class of x
q = c(x,x,8)
q
x[3] # third element of x
x[2:3] # second and third element of x
### Mean
mean(x)
### Length of a vector
len_x = length(x)
len_x
### Matrix
### Concatenate numbers as vector
x = c(1,2,4)
y = c(5,6,7)
# Bind two column vectors to create a matrix
X = cbind(x,y)
class(X)
X
# Define matrix from a column vector, by designating no. of rows and columns
Z = matrix(c(1,1,2,4,1,2),
nrow = 3,
ncol = 2,
byrow = FALSE)
Z
rbind(X,Z)
Z
t(Z) # Transpose
# Matrix multiplication
X %*% Z # spits out an error
t(X) %*% Z # runs fine
for (kk in 1:100) {
print(kk)
}
### conditional statement: if-else
if (kk == 100) {
print("kk is 100")
} else {
print("kk is not 100")
}
##### Random variables, distribution function, quantiles
# Generate binomial
# rbinom(n, size, prob)
X_binom = rbinom(n = 50,
size = 1, # This is the size parameter
prob = 0.3) # This is the "success" probability
### The Normal distribution
# Generate Normal random variables
X_norm = rnorm(n = 50,
mean = 0,
sd = 1)
# Normal CDF
pnorm(1.96,
mean = 0,
sd = 1)
# Normal density
dnorm(1.96,
mean = 0,
sd = 1)
# Normal quantile
qnorm(0.025,
mean = 0,
sd = 1)
clear()
clear
rm(list = ls())
demo = T
require(psych)
require(data.table)
if(demo) {setwd("~/Library/Mobile Documents/com~apple~CloudDocs/School Work/Sem 2/BUAN 6337/HW/HW-1/pset1")}
SwineFlu <- fread("SwinFlu2009.csv",
na.strings = c("NA", ""),
sep = "auto",
stringsAsFactors = FALSE,
data.table = TRUE)
colClasses = c("observation_id","firstcase_date_id",
"firstcase_continent_id","country",
"firstcasereport_date","cum_case_April",
"cum_case_May","cum_case_June","cum_case_July","cum_case_August",
"cum_case_Aug09","firstdeath_date_id","firstdeath_continent_id",
"firstdeath_date","cum_death_May","cum_death_June","cum_death_July",
"cum_death_August","cum_death_September","cum_death_October","cum_death_November","cum_death_December")
colnames(SwineFlu) <- colClasses
if(demo) {str(SwineFlu)
View(SwineFlu)}
SwineFlu$firstcasereport_date <- as.Date(SwineFlu$firstcasereport_date,format = "%m/%d/%Y")
SwineFlu$firstdeath_date <- as.Date(SwineFlu$firstdeath_date,format = "%m/%d/%Y")
SwineFlu$Datediff_calc <- difftime(SwineFlu$firstcasereport_date,as.Date("2009-04-29"),units = "days")
SwineFlu2009_days_from_first_incidence <- subset(SwineFlu,select = c("firstcase_date_id","country","Datediff_calc"))
fwrite(SwineFlu2009_days_from_first_incidence,"SwineFlu2009_days_from_first_incidence.csv")
pizza <- fread("Pizza.csv")
print(pizza)
str(pizza)
SwineFlu2009_days_from_first_incidence
describe(pizza)
if(demo) {View(pizza)}
## fread identifies the column as an integer and assume its an continuous
pizza <- fread("Pizza.csv",header = T,colClasses = c("factor","integer","integer","integer","integer","integer"))
if(demo) {str(pizza)}
pizza$avg_rating <- rowMeans(pizza[,2:6],na.rm = T)
describe(pizza)
if(demo) {str(pizza)
describe(pizza)
}
hotel <- fread("Hotel.csv")
hotel <- read.csv("Hotel.csv", header=FALSE, stringsAsFactors=TRUE)
hotel <- setDT(hotel)
if(demo) {str(hotel)}
colnames(hotel)[1] <- "room_no"
colnames(hotel)[2] <- "no_of_guests"
hotel$check_in_date <- as.Date(with(hotel,paste(V3,V4,V5,sep="-")),"%m-%d-%Y")
hotel$check_out_date <- as.Date(with(hotel,paste(V6,V7,V8,sep="-")),"%m-%d-%Y")
if(demo) {str(hotel)}
hotel$internet_usage <- ifelse(hotel$V9 == "YES",hotel$V10,0)
hotel$room_type <- ifelse(hotel$V9 == "YES",as.character(hotel$V11),as.character(hotel$V10))
hotel$room_rate <- ifelse(hotel$V9 == "YES",hotel$V12,strtoi(hotel$V11))
hotelColNames <- c("room_no","no_of_guests","check_in_date","check_out_date","internet_usage","room_type","room_rate")
hotel_cleaned <- subset(hotel,select = hotelColNames)
hotel_cleaned$subtotal <- hotel_cleaned$room_rate*difftime(hotel_cleaned$check_out_date,hotel_cleaned$check_in_date)+ 10 * (hotel_cleaned$no_of_guests-1) + ifelse(hotel_cleaned$internet_usage > 0 , 9.95 + 5.95 * (hotel_cleaned$internet_usage-1),0)
hotel_cleaned$total <- round(hotel_cleaned$subtotal * 0.0875,2)
if(demo) {summary(hotel)}
hotel_cleaned[which(hotel_cleaned$room_no == 247 & hotel_cleaned$check_in_date == "2014-02-07"),]
SwineFlu <- fread("SwinFlu2009.csv",
na.strings = c("NA", ""),
sep = "auto",
stringsAsFactors = FALSE,
data.table = TRUE)
str(SwineFlu)
knitr::opts_chunk$set(echo = TRUE)
require(psych)
require(data.table)
# Section - 2
if(demo) {setwd("~/Library/Mobile Documents/com~apple~CloudDocs/School Work/Sem 2/BUAN 6337/HW/HW-1/pset1")}
SwineFlu <- fread("SwinFlu2009.csv",
na.strings = c("NA", ""),
sep = "auto",
stringsAsFactors = FALSE,
data.table = TRUE)
str(SwineFlu)
colClasses = c("observation_id","firstcase_date_id",
"firstcase_continent_id","country",
"firstcasereport_date","cum_case_April",
"cum_case_May","cum_case_June","cum_case_July","cum_case_August",
"cum_case_Aug09","firstdeath_date_id","firstdeath_continent_id",
"firstdeath_date","cum_death_May","cum_death_June","cum_death_July",
"cum_death_August","cum_death_September","cum_death_October","cum_death_November","cum_death_December")
colnames(SwineFlu) <- colClasses
if(T) {str(SwineFlu)
View(SwineFlu)}
SwineFlu$firstcasereport_date <- as.Date(SwineFlu$firstcasereport_date,format = "%m/%d/%Y")
SwineFlu$firstdeath_date <- as.Date(SwineFlu$firstdeath_date,format = "%m/%d/%Y")
SwineFlu$Datediff_calc <- difftime(SwineFlu$firstcasereport_date,as.Date("2009-04-29"),units = "days")
SwineFlu2009_days_from_first_incidence <- subset(SwineFlu,select = c("firstcase_date_id","country","Datediff_calc"))
fwrite(SwineFlu2009_days_from_first_incidence,"SwineFlu2009_days_from_first_incidence.csv")
str(SwineFlu2009_days_from_first_incidence)
## Section 2
pizza <- fread("Pizza.csv")
str(pizza)
print(pizza)
lapply(pizza,class)
describe(pizza)
if(demo) {View(pizza)}
## Survey Num column in the data frame should be a factor variable as it is unique and is not ordinal in nature.
## fread identifies the column as an integer and assume its an continuous
pizza <- fread("Pizza.csv",header = T,colClasses = c("factor","integer","integer","integer","integer","integer"))
if(demo) {str(pizza)}
pizza$avg_rating <- rowMeans(pizza[,2:6],na.rm = T)
if(demo) {str(pizza)
describe(pizza)
}
## Section 3
hotel <- fread("Hotel.csv")
## The problem is first row has 11 fields but the dataset has 12.
hotel <- read.csv("Hotel.csv", header=FALSE, stringsAsFactors=TRUE)
hotel <- setDT(hotel)
if(demo) {str(hotel)}
colnames(hotel)[1] <- "room_no"
colnames(hotel)[2] <- "no_of_guests"
hotel$check_in_date <- as.Date(with(hotel,paste(V3,V4,V5,sep="-")),"%m-%d-%Y")
hotel$check_out_date <- as.Date(with(hotel,paste(V6,V7,V8,sep="-")),"%m-%d-%Y")
if(T) {str(hotel)}
hotel[,':='(internet_usage=ifelse(V9 == "YES",V10,0))]
hotel[,':='(room_type=ifelse(V9 == "YES",as.character(V11),as.character(V10)))]
hotel[,':='(room_rate=ifelse(V9 == "YES",V12,strtoi(V11)))]
hotelColNames <- c("room_no","no_of_guests","check_in_date","check_out_date","internet_usage","room_type","room_rate")
hotel_cleaned <- subset(hotel,select = hotelColNames)
str(hotel_cleaned)
hotel_cleaned$subtotal <- hotel_cleaned$room_rate*as.numeric(difftime(hotel_cleaned$check_out_date,hotel_cleaned$check_in_date))+ 10 * (hotel_cleaned$no_of_guests-1) + ifelse(hotel_cleaned$internet_usage > 0 , 9.95 + 5.95 * (hotel_cleaned$internet_usage-1),0)
hotel_cleaned$total <- round(hotel_cleaned$subtotal * 0.0875,2)
if(demo) {summary(hotel)}
hotel_cleaned[which(hotel_cleaned$room_no == 247 & hotel_cleaned$check_in_date == "2014-02-07"),]
rm(list = ls())
demo = T
require(psych)
require(data.table)
if(demo) {setwd("~/Library/Mobile Documents/com~apple~CloudDocs/School Work/Sem 2/BUAN 6337/HW/HW-1/pset1")}
SwineFlu <- fread("SwinFlu2009.csv",
na.strings = c("NA", ""),
sep = "auto",
stringsAsFactors = FALSE,
data.table = TRUE)
str(SwineFlu)
if(demo) {str(SwineFlu)
summary(SwineFlu)}
colClasses = c("observation_id","firstcase_date_id",
"firstcase_continent_id","country",
"firstcasereport_date","cum_case_April",
"cum_case_May","cum_case_June","cum_case_July","cum_case_August",
"cum_case_Aug09","firstdeath_date_id","firstdeath_continent_id",
"firstdeath_date","cum_death_May","cum_death_June","cum_death_July",
"cum_death_August","cum_death_September","cum_death_October","cum_death_November","cum_death_December")
colnames(SwineFlu) <- colClasses
if(demo) {str(SwineFlu)
summary(SwineFlu)}
colClasses = c("observation_id","firstcase_date_id",
"firstcase_continent_id","country",
"firstcasereport_date","cum_case_April",
"cum_case_May","cum_case_June","cum_case_July","cum_case_August",
"cum_case_Aug09","firstdeath_date_id","firstdeath_continent_id",
"firstdeath_date","cum_death_May","cum_death_June","cum_death_July",
"cum_death_August","cum_death_September","cum_death_October","cum_death_November","cum_death_December")
colnames(SwineFlu) <- colClasses
if(demo) {str(SwineFlu)
summary(SwineFlu)}
colClasses = c("observation_id","firstcase_date_id",
"firstcase_continent_id","country",
"firstcasereport_date","cum_case_April",
"cum_case_May","cum_case_June","cum_case_July","cum_case_August",
"cum_case_Aug09","firstdeath_date_id","firstdeath_continent_id",
"firstdeath_date","cum_death_May","cum_death_June","cum_death_July",
"cum_death_August","cum_death_September","cum_death_October","cum_death_November","cum_death_December")
colnames(SwineFlu) <- colClasses
if(demo) {str(SwineFlu)
summary(SwineFlu)}
SwineFlu$firstcasereport_date <- as.Date(SwineFlu$firstcasereport_date,format = "%m/%d/%Y")
SwineFlu$firstdeath_date <- as.Date(SwineFlu$firstdeath_date,format = "%m/%d/%Y")
if(demo) {str(SwineFlu)}
SwineFlu$Datediff_calc <- difftime(SwineFlu$firstcasereport_date,as.Date("2009-04-29"),units = "days")
if(demo) {str(SwineFlu)}
SwineFlu2009_days_from_first_incidence <- subset(SwineFlu,select = c("firstcase_date_id","country","Datediff_calc"))
fwrite(SwineFlu2009_days_from_first_incidence,"SwineFlu2009_days_from_first_incidence.csv")
str(SwineFlu2009_days_from_first_incidence)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/School Work/Sem 2/BUAN 6337/HW/HW-1/pset1")
pizza <- fread("Pizza.csv")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/School Work/Sem 2/BUAN 6337/HW/HW-1/pset1")
pizza <- fread("Pizza.csv")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/School Work/Sem 2/BUAN 6337/HW/HW-1/pset1")
pizza <- fread("Pizza.csv")
str(pizza)
print(pizza)
lapply(pizza,class)
describe(pizza)
pizza <- fread("Pizza.csv",header = T,colClasses = c("factor","integer","integer","integer","integer","integer"))
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/School Work/Sem 2/BUAN 6337/HW/HW-1/pset1")
pizza <- fread("Pizza.csv",header = T,colClasses = c("factor","integer","integer","integer","integer","integer"))
if(demo) {str(pizza)}
pizza$avg_rating <- rowMeans(pizza[,2:6],na.rm = T)
if(demo) {str(pizza)
describe(pizza)
}
hotel <- fread("Hotel.csv")
hotel <- read.csv("Hotel.csv", header=FALSE, stringsAsFactors=TRUE)
hotel <- setDT(hotel)
if(demo) {str(hotel)}
colnames(hotel)[1] <- "room_no"
colnames(hotel)[2] <- "no_of_guests"
colnames(hotel)[1] <- "room_no"
colnames(hotel)[2] <- "no_of_guests"
if(demo) {str(hotel)}
hotel$check_in_date <- as.Date(with(hotel,paste(V3,V4,V5,sep="-")),"%m-%d-%Y")
hotel$check_out_date <- as.Date(with(hotel,paste(V6,V7,V8,sep="-")),"%m-%d-%Y")
if(demo) {str(hotel)}
hotel[,':='(room_type=ifelse(V9 == "YES",as.character(V11),as.character(V10)))]
hotel[,':='(internet_usage=ifelse(V9 == "YES",V10,0))]
hotel[,':='(room_type=ifelse(V9 == "YES",as.character(V11),as.character(V10)))]
hotel[,':='(room_type=ifelse(V9 == "YES",as.character(V11),as.character(V10)))]
if(demo) {str(hotel)}
hotel[,':='(internet_usage=ifelse(V9 == "YES",V10,0))]
if(demo) {str(hotel)}
hotel[,':='(room_rate=ifelse(V9 == "YES",V12,strtoi(V11)))]
if(demo) {str(hotel)}
hotelColNames <- c("room_no","no_of_guests","check_in_date","check_out_date","internet_usage","room_type","room_rate")
hotel_cleaned <- subset(hotel,select = hotelColNames)
if(demo) {str(hotel_cleaned)}
hotel_cleaned$subtotal <- hotel_cleaned$room_rate*as.numeric(difftime(hotel_cleaned$check_out_date,hotel_cleaned$check_in_date,units = "days"))+ 10 * (hotel_cleaned$no_of_guests-1) + ifelse(hotel_cleaned$internet_usage > 0 , 9.95 + 5.95 * (hotel_cleaned$internet_usage-1),0)
if(demo) {str(hotel_cleaned)}
hotel_cleaned$total <- round(hotel_cleaned$subtotal * 0.0875,2)
if(demo) {str(hotel_cleaned)}
Sys.getenv("RSTUDIO_PANDOC")
hotel_cleaned$total <- round(hotel_cleaned$subtotal * 1.0875,2)
if(demo) {str(hotel_cleaned)}
hotel_cleaned[which(hotel_cleaned$room_no == 247 & hotel_cleaned$check_in_date == "2014-02-07"),]
rm(list = ls())
demo = T
require(psych)
require(data.table)
SwineFlu <- fread("SwinFlu2009.csv",
na.strings = c("NA", ""),
sep = "auto",
stringsAsFactors = FALSE,
data.table = TRUE)
str(SwineFlu)
colClasses = c("observation_id","firstcase_date_id",
"firstcase_continent_id","country",
"firstcasereport_date","cum_case_April",
"cum_case_May","cum_case_June","cum_case_July","cum_case_August",
"cum_case_Aug09","firstdeath_date_id","firstdeath_continent_id",
"firstdeath_date","cum_death_May","cum_death_June","cum_death_July",
"cum_death_August","cum_death_September","cum_death_October","cum_death_November","cum_death_December")
colnames(SwineFlu) <- colClasses
if(demo) {str(SwineFlu)
summary(SwineFlu)}
SwineFlu$firstcasereport_date <- as.Date(SwineFlu$firstcasereport_date,format = "%m/%d/%Y")
SwineFlu$firstdeath_date <- as.Date(SwineFlu$firstdeath_date,format = "%m/%d/%Y")
if(demo) {str(SwineFlu)}
SwineFlu$Datediff_calc <- difftime(SwineFlu$firstcasereport_date,as.Date("2009-04-29"),units = "days")
if(demo) {str(SwineFlu)}
SwineFlu2009_days_from_first_incidence <- subset(SwineFlu,select = c("firstcase_date_id","country","Datediff_calc"))
fwrite(SwineFlu2009_days_from_first_incidence,"SwineFlu2009_days_from_first_incidence.csv")
str(SwineFlu2009_days_from_first_incidence)
pizza <- fread("Pizza.csv")
str(pizza)
print(pizza)
lapply(pizza,class)
describe(pizza)
pizza <- fread("Pizza.csv",header = T,colClasses = c("factor","integer","integer","integer","integer","integer"))
if(demo) {str(pizza)}
pizza$avg_rating <- rowMeans(pizza[,2:6],na.rm = T)
if(demo) {str(pizza)
describe(pizza)
}
hotel <- fread("Hotel.csv")
hotel <- read.csv("Hotel.csv", header=FALSE, stringsAsFactors=TRUE)
hotel <- setDT(hotel)
if(demo) {str(hotel)}
colnames(hotel)[1] <- "room_no"
colnames(hotel)[2] <- "no_of_guests"
if(demo) {str(hotel)}
hotel$check_in_date <- as.Date(with(hotel,paste(V3,V4,V5,sep="-")),"%m-%d-%Y")
hotel$check_out_date <- as.Date(with(hotel,paste(V6,V7,V8,sep="-")),"%m-%d-%Y")
if(demo) {str(hotel)}
hotel[,':='(internet_usage=ifelse(V9 == "YES",V10,0))]
if(demo) {str(hotel)}
hotel[,':='(room_type=ifelse(V9 == "YES",as.character(V11),as.character(V10)))]
if(demo) {str(hotel)}
hotel[,':='(room_rate=ifelse(V9 == "YES",V12,strtoi(V11)))]
if(demo) {str(hotel)}
hotelColNames <- c("room_no","no_of_guests","check_in_date","check_out_date","internet_usage","room_type","room_rate")
hotel_cleaned <- subset(hotel,select = hotelColNames)
if(demo) {str(hotel_cleaned)}
hotel_cleaned$subtotal <- hotel_cleaned$room_rate*as.numeric(difftime(hotel_cleaned$check_out_date,hotel_cleaned$check_in_date,units = "days"))+ 10 * (hotel_cleaned$no_of_guests-1) + ifelse(hotel_cleaned$internet_usage > 0 , 9.95 + 5.95 * (hotel_cleaned$internet_usage-1),0)
if(demo) {str(hotel_cleaned)}
hotel_cleaned$total <- round(hotel_cleaned$subtotal * 1.0875,2)
if(demo) {str(hotel_cleaned)}
hotel_cleaned[which(hotel_cleaned$room_no == 247 & hotel_cleaned$check_in_date == "2014-02-07"),]
hotel_cleaned[which(hotel_cleaned$room_no == 247 & hotel_cleaned$check_in_date == "2014-02-07"),]$grand_total
results <- hotel_cleaned[which(hotel_cleaned$room_no == 247 & hotel_cleaned$check_in_date == "2014-02-07"),]
results$total
(results <- hotel_cleaned[which(hotel_cleaned$room_no == 247 & hotel_cleaned$check_in_date == "2014-02-07"),])
results$total
rm(list = ls())
demo = T
require(psych)
require(data.table)
SwineFlu <- fread("SwinFlu2009.csv",
na.strings = c("NA", ""),
sep = "auto",
stringsAsFactors = FALSE,
data.table = TRUE)
str(SwineFlu)
colClasses = c("observation_id","firstcase_date_id",
"firstcase_continent_id","country",
"firstcasereport_date","cum_case_April",
"cum_case_May","cum_case_June","cum_case_July","cum_case_August",
"cum_case_Aug09","firstdeath_date_id","firstdeath_continent_id",
"firstdeath_date","cum_death_May","cum_death_June","cum_death_July",
"cum_death_August","cum_death_September","cum_death_October","cum_death_November","cum_death_December")
colnames(SwineFlu) <- colClasses
if(demo) {str(SwineFlu)
summary(SwineFlu)}
SwineFlu$firstcasereport_date <- as.Date(SwineFlu$firstcasereport_date,format = "%m/%d/%Y")
SwineFlu$firstdeath_date <- as.Date(SwineFlu$firstdeath_date,format = "%m/%d/%Y")
if(demo) {str(SwineFlu)}
SwineFlu$Datediff_calc <- difftime(SwineFlu$firstcasereport_date,as.Date("2009-04-29"),units = "days")
if(demo) {str(SwineFlu)}
SwineFlu2009_days_from_first_incidence <- subset(SwineFlu,select = c("firstcase_date_id","country","Datediff_calc"))
fwrite(SwineFlu2009_days_from_first_incidence,"SwineFlu2009_days_from_first_incidence.csv")
str(SwineFlu2009_days_from_first_incidence)
pizza <- fread("Pizza.csv")
str(pizza)
print(pizza)
lapply(pizza,class)
describe(pizza)
pizza <- fread("Pizza.csv",header = T,colClasses = c("factor","integer","integer","integer","integer","integer"))
if(demo) {str(pizza)}
pizza$avg_rating <- rowMeans(pizza[,2:6],na.rm = T)
if(demo) {str(pizza)
describe(pizza)
}
hotel <- fread("Hotel.csv")
hotel <- read.csv("Hotel.csv", header=FALSE, stringsAsFactors=TRUE)
hotel <- setDT(hotel)
if(demo) {str(hotel)}
colnames(hotel)[1] <- "room_no"
colnames(hotel)[2] <- "no_of_guests"
if(demo) {str(hotel)}
hotel$check_in_date <- as.Date(with(hotel,paste(V3,V4,V5,sep="-")),"%m-%d-%Y")
hotel$check_out_date <- as.Date(with(hotel,paste(V6,V7,V8,sep="-")),"%m-%d-%Y")
if(demo) {str(hotel)}
hotel[,':='(internet_usage=ifelse(V9 == "YES",V10,0))]
if(demo) {str(hotel)}
hotel[,':='(room_type=ifelse(V9 == "YES",as.character(V11),as.character(V10)))]
if(demo) {str(hotel)}
hotel[,':='(room_rate=ifelse(V9 == "YES",V12,strtoi(V11)))]
if(demo) {str(hotel)}
hotelColNames <- c("room_no","no_of_guests","check_in_date","check_out_date","internet_usage","room_type","room_rate")
hotel_cleaned <- subset(hotel,select = hotelColNames)
if(demo) {str(hotel_cleaned)}
hotel_cleaned$subtotal <- hotel_cleaned$room_rate*as.numeric(difftime(hotel_cleaned$check_out_date,hotel_cleaned$check_in_date,units = "days"))+ 10 * (hotel_cleaned$no_of_guests-1) + ifelse(hotel_cleaned$internet_usage > 0 , 9.95 + 5.95 * (hotel_cleaned$internet_usage-1),0)
if(demo) {str(hotel_cleaned)}
hotel_cleaned$total <- round(hotel_cleaned$subtotal * 1.0875,2)
if(demo) {str(hotel_cleaned)}
(results <- hotel_cleaned[which(hotel_cleaned$room_no == 247 & hotel_cleaned$check_in_date == "2014-02-07"),])
results$total
