if(demo) {setwd("~/Library/Mobile Documents/com~apple~CloudDocs/School Work/Sem 2/BUAN 6337/HW/pset3")}
n = c(1, 2, 3, 5, 10, 50, 100, 1000, 3000)
Q1 = function(n){
# c
x = runif(n,0,2)
x_bar = mean(x)
#d
e_x = 1
diff = abs(x_bar - e_x)
#e
quad = function(x)
{
return (2*x^2 - 5*x + 1 + (1/(3*x)))
}
diff_function = abs(quad(x_bar)-quad(e_x))
return(list(n=n,mean=x_bar,diff=diff,diff_func=diff_function))
}
for(i in n){
assign(paste0("v",i),Q1(i))
if(demo){print(get(paste0("v",i)))}
}
n = c(1, 2, 3, 5, 10, 50, 100, 1000, 3000)
Q2 = function(n){
t = c(1:2500)
v = replicate(length(t), runif(i, 0, 2))
if (n == 1) {
vn_2500 = v
} else {
vn_2500 = apply(v, 2, mean)
}
vn_2500_bar = mean(vn_2500)
vn_2500_var = var(vn_2500)
e_xi = 1
yn_2500 = sqrt(n)*(vn_2500 - e_xi)
mean_yn_2500 = mean(yn_2500)
var_yn_2500 = var(yn_2500)
var_xi = 1/3
zn_2500 = sqrt(n)*(vn_2500 - e_xi)/sqrt(var_xi)
mean_zn_2500 = mean(zn_2500)
var_zn_2500 = var(zn_2500)
return(list(n=n, vn = vn_2500, mean_vn = vn_2500_bar, var_vn = vn_2500_var, zn = zn_2500, mean_zn = mean_zn_2500,yn = yn_2500, var_zn = var_zn_2500))
}
for(i in n){
assign(paste0("f",i),Q2(i))
}
for(i in n){
hist(Q2(i)$zn, breaks = 100,
main = paste("Histogram of zn_2500 for n = ", i, sep = ""),
xlab = "zn_t values",
xlim = c(-3,3))
}
for(i in n){
hist(Q2(i)$yn, breaks = 100,
main = paste("Histogram of zn_2500 for n = ", i, sep = ""),
xlab = "vn_t values",
xlim = c(-3,3))
}
n = c(2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 50, 75, 100, 250, 500, 1000, 2000, 3000)
Q3 <- function(n) {
x = matrix(runif(n, 0, 12), nrow = i, ncol = 1)
u = matrix(runif(n, -4, 4), nrow = i, ncol = 1)
y = 3 + (2 * x) + u
cov_xy = cov(x, y)
var_x = var(x)
hat_beta = cov_xy/var_x
abs_beta = abs(hat_beta - 2)
return(list(n=n,x=x,u=u,y=y,cov_xy=cov_xy,var_x=var_x,hat_beta=hat_beta,abs_beta=abs_beta))
}
for(i in n){
assign(paste0("x",i),Q3(i))
}
beta = c()
for(i in n){
beta = append((Q3(i)$abs_beta),beta)
}
plot(beta,n)
n = c(2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 50, 75, 100, 250, 500, 1000, 2000, 3000)
Q4 <- function(n){
b <- c()
for (j in c(1:2500)) {
# a
x = matrix(runif(n, 0, 12), nrow = n, ncol = 1)
# b
u = matrix(runif(n, -4, 4), nrow = n, ncol = 1)
# c
y = 3 + (2 * x) + u
# d
cov_xy = cov(x, y)
var_x = var(x)
beta_hat = cov_xy/var_x
b = append(b, beta_hat)
}
#  f
var_b = var(b)
c = sqrt(n)*(b - 2)
return(list(n=n,b=b,var_b=var_b,c=c))
}
for(i in n){
assign(paste0("q",i),Q4(i))
hist_data <- hist(Q4(i)$c, breaks = 100,
main = paste("Histogram of c for n = ", i, sep = ""),
xlab = "c_i values",
xlim = c(-3,3))
x_values <- seq(min(Q4(i)$c), max(Q4(i)$c), length = 100)
y_values <- dnorm(x_values, mean = mean(Q4(i)$c), sd = sd(Q4(i)$c))
y_values <- y_values * diff(hist_data$mids[1:2]) * length(Q4(i)$c)
lines(x_values, y_values, lwd = 2)
}
vdgm <- fread("videogamesales_main.csv",header = T)
if(demo) {str(vdgm)}
ptl_frq <- table(vdgm$Platform)
gnr_frq <- table(vdgm$Genre)
rating_frq <- table(vdgm$Rating)
vdgm_2013 <- vdgm[,Platform]
vdgm$Action = ifelse(vdgm$Genre =='Action', 1, 0)
vdgm$adventure = ifelse (vdgm$Genre == 'Adventure',1, 0)
vdgm$fighting = ifelse(vdgm$Genre =='Fighting', 1, 0)
vdgm$misc = ifelse (vdgm$Genre == 'Misc',1, 0)
vdgm$platform = ifelse(vdgm$Genre =="Platform",1, 0)
vdgm$puzzle = ifelse(vdgm$Genre =="Puzzle", 1, 0)
vdgm$racing = ifelse(vdgm$Genre =='Racing', 1, 0)
vdgm$Role_playing = ifelse(vdgm$Genre == "Role-Playing", 1, 0)
vdgm$Shooter = ifelse(vdgm$Genre =="Shooter", 1, 0)
vdgm$simulation = ifelse(vdgm$Genre == 'Simulation', 1, 0)
vdgm$sports = ifelse(vdgm$Genre == "Sports", 1, 0)
vdgm$strategy = ifelse(vdgm$Genre == 'strategy',1,0)
vdgm$Action = ifelse(vdgm$Genre =='Action', 1, 0)
vdgm$adventure = ifelse (vdgm$Genre == 'Adventure',1, 0)
vdgm$fighting = ifelse(vdgm$Genre =='Fighting', 1, 0)
vdgm$misc = ifelse (vdgm$Genre == 'Misc',1, 0)
vdgm$platform = ifelse(vdgm$Genre =="Platform",1, 0)
vdgm$puzzle = ifelse(vdgm$Genre =="Puzzle", 1, 0)
vdgm$racing = ifelse(vdgm$Genre =='Racing', 1, 0)
vdgm$Role_playing = ifelse(vdgm$Genre == "Role-Playing", 1, 0)
vdgm$Shooter = ifelse(vdgm$Genre =="Shooter", 1, 0)
vdgm$simulation = ifelse(vdgm$Genre == 'Simulation', 1, 0)
vdgm$sports = ifelse(vdgm$Genre == "Sports", 1, 0)
vdgm$strategy = ifelse(vdgm$Genre == 'strategy',1,0)
vdgm$DS = ifelse (vdgm$Platform == 'DS',1, 0)
vdgm$GBA = ifelse(vdgm$Platform =='GBA',1, 0)
vdgm$GC = ifelse(vdgm$Platform =='GC',1,0)
vdgm$Pc = ifelse(vdgm$Platform=='PC',1,0)
vdgm$Ps2 = ifelse(vdgm$Platform =="PS2",1,0)
vdgm$Ps3 = ifelse(vdgm$Platform =="PS3",1,0)
vdgm$PSP = ifelse (vdgm$Platform=="PSP",1,0)
vdgm$Wii = ifelse (vdgm$platform =="Wii",1,0)
vdgm$X360 = ifelse(vdgm$Platform =="x360",1,0)
vdgm$XB = ifelse (vdgm$Platform == "XB",1,0)
vdgm$DS = ifelse(vdgm$Platform == "DS",1,0)
vdgm$E = ifelse(vdgm$Rating == "E",1,0)
vdgm$`E10+` = ifelse(vdgm$Rating == "E10+",1,0)
vdgm$M = ifelse(vdgm$Rating =='M' , 1,0)
vdgm$T = ifelse(vdgm$Rating == "T",1,0)
lm1 <- lm(Global_Sales ~. - Name - Publisher - Developer,data = vdgm)
summary(lm1)
vdgm$ln_Global_Sales = log(vdgm$Global_Sales)
vdgm$ln_Critic_Score = log(vdgm$Critic_Score)
vdgm$ln_Critic_Count = log(vdgm$Critic_Count)
vdgm$ln_User_Score = log(vdgm$User_Score)
vdgm$ln_User_Count = log(vdgm$User_Count)
lm2 <- lm(ln_Global_Sales ~. - Name - ln_Critic_Score - ln_Critic_Count - ln_User_Score - ln_User_Count - Publisher - Developer - Global_Sales,data = vdgm)
summary(lm2)
lm3 <- lm(ln_Global_Sales ~. - Global_Sales - Name - Publisher - Developer - Critic_Score - Critic_Count -User_Score - ln_User_Count,data = vdgm)
summary(lm3)
diff_func = c()
for(i in n){
diff_func = append((Q1(i)$diff_func),diff_func)
}
plot(diff_func,n)
diff_func
install.packages("rlist")
require(rlist)
plot(list.reverse(diff_func),n)
plot(rev(diff_func),n)
list.reverse
plot(list.reverse(diff_func),n)
diff_func = c()
for(i in n){
diff_func = append((Q1(i)$diff_func),diff_func)
}
plot(list.reverse(diff_func),n)
plot((diff_func),n)
plot((diff_func))
diff_func
plot(rev(diff_func))
?binom
?binom.test
#Part-c
library(data.table)
n_values <- c(1, 2, 3, 5, 10, 50, 100, 1000, 3000)
results <- data.table(n = integer(length(n_values)),
mean = numeric(length(n_values)),
var = numeric(length(n_values)))
for (i in seq_along(n_values)) {
n <- n_values[i]
X <- runif(n, 0, 2)
mean_X <- mean(X)
var_X <- var(X)
results[i, `:=`(n=n_values[i], mean = mean_X, var = var_X)]
}
results
results
#Part-d
n_values <- c(1, 2, 3, 5, 10, 50, 100, 1000, 3000)
results <- data.table(n = integer(length(n_values)),
mean = numeric(length(n_values)),
var = numeric(length(n_values)),
abs_diff = numeric(length(n_values)))
for (i in seq_along(n_values)) {
n <- n_values[i]
X <- runif(n, 0, 2)
mean_X <- mean(X)
var_X <- var(X)
abs_diff_X <- abs(mean_X - 1)
results[i, `:=`(n = n_values[i], mean = mean_X, var = var_X, abs_diff = abs_diff_X)]
}
results
results
results <- data.table(n = integer(length(n_values)),
mean = numeric(length(n_values)),
var = numeric(length(n_values)),
abs_diff_X1 = numeric(length(n_values)),
abs_diff_fX1 = numeric(length(n_values)))
for (i in seq_along(n_values)) {
n <- n_values[i]
X <- runif(n, 0, 2)
mean_X <- mean(X)
var_X <- var(X)
abs_diff_X <- abs(mean_X - 1)
f_mean_X <- 2*mean_X^2 - 5*mean_X + 1 + 1/(3*mean_X)
abs_diff_fX <- abs(f_mean_X - 5/3)
results[i, `:=`(n = n_values[i], mean = mean_X, var = var_X, abs_diff_X1 = abs_diff_X, abs_diff_fX1 = abs_diff_fX)]
}
results
#Part-e
set.seed(123)  # for reproducibility
n_vec <- c(1, 2, 3, 5, 10, 50, 100, 1000, 3000)  # vector of sample sizes
t_vec <- 1:2500  # vector of t values
Vn_mat <- matrix(0, nrow = 2500, ncol = length(n_vec))  # matrix to store sample mean vectors
for (i in seq_along(n_vec)) {
n <- n_vec[i]
for (t in t_vec) {
X <- runif(n, min = 0, max = 2)  # generate n independent Uniform[0, 2] random variables
Vn_mat[t, i] <- mean(X)  # calculate sample mean and store in matrix
}
}
Vn_mat
#Part-f
Vn2500 <- apply(Vn_mat, 2, mean)  # calculate mean of each column
Vn_var <- apply(Vn_mat, 2, var)  # calculate variance of each column
# display mean and variance of Vn2500 for each value of n
data.frame(n = n_vec, mean = Vn2500, variance = Vn_var)
#Part-g
# calculate E[Xi] and store as a constant
EXi <- (0 + 2) / 2  # mean of Uniform[0, 2] distribution
n_samples=2500
# initialize matrix to store transformed vectors
Yn_mat <- matrix(0, nrow = n_samples, ncol = length(n_vec))
# loop over values of n and generate random samples
for (i in seq_along(n_vec)) {
n <- n_vec[i]
# loop over each sample for this value of n
for (j in 1:n_samples) {
# generate sample of Uniform[0, 2] random variables
X <- runif(n, min = 0, max = 2)
# calculate sample mean
X_bar <- mean(X)
# calculate transformed value Yn
Yn <- sqrt(n) * (X_bar - EXi)
# store transformed value in matrix
Yn_mat[j, i] <- Yn
}
}
# display Yn2500 matrix
head(Yn_mat)
#Part-h
# calculate mean of transformed vectors
Yn_mean <- apply(Yn_mat, MARGIN = 2, FUN = mean)
# calculate variance of transformed vectors
Yn_var <- apply(Yn_mat, MARGIN = 2, FUN = var)
# display mean and variance
data.frame(n = n_vec, mean = Yn_mean, variance = Yn_var)
#Part-i
# load ggplot2 library
library(ggplot2)
# create data frame with transformed vectors
Yn_df <- data.frame(Yn2500 = as.vector(Yn_mat), n = rep(n_vec, each = 2500))
# plot histogram of transformed vectors using ggplot2
ggplot(Yn_df, aes(x = Yn2500)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1, color = "black", fill = "lightblue") +
facet_wrap(~ n, scales = "free_x") +
labs(title = "Histogram of Yn2500", x = "Transformed Value", y = "Density")
#Part-j
# Define the number of simulations and sample sizes
n_sim <- 2500
n_vec <- c(1, 2, 3, 5, 10, 50, 100, 1000, 3000)
# Define the matrix to store the transformed data
zn_mat <- matrix(0, nrow = n_sim, ncol = length(n_vec))
# Calculate E[Xi] and Var(Xi)
EXi <- 1
VarXi <- 1/3
# Loop over the sample sizes
for (i in seq_along(n_vec)) {
n <- n_vec[i]
# Generate the n x n_sim matrix of uniform random variables
X_mat <- matrix(runif(n * n_sim, 0, 2), ncol = n)
# Calculate the sample means
X_bar <- rowMeans(X_mat)
# Transform the sample means using Z-score
Z_n <- sqrt(n) * (X_bar - EXi) / sqrt(VarXi)
# Store the transformed data in the matrix
zn_mat[, i] <- Z_n
}
# display Yn2500 matrix
head(zn_mat)
#Part-h
# calculate mean of transformed vectors
Zn_mean <- apply(zn_mat, MARGIN = 2, FUN = mean)
# calculate variance of transformed vectors
Zn_var <- apply(zn_mat, MARGIN = 2, FUN = var)
# display mean and variance
data.frame(n = n_vec, mean = Zn_mean, variance = Zn_var)
#Part-i
# load ggplot2 library
library(ggplot2)
# create data frame with transformed vectors
Zn_df <- data.frame(zn2500 = as.vector(zn_mat), n = rep(n_vec, each = 2500))
# plot histogram of transformed vectors using ggplot2
ggplot(Zn_df, aes(x = zn2500)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1, color = "black", fill = "lightblue") +
facet_wrap(~ n, scales = "free_x") +
labs(title = "Histogram of Zn2500", x = "Transformed Value", y = "Density")
#Question 3
#Part-a
n_values <- c(2,3,4,5,6,7,8,9,10,15,20,30,50,75,100,250,500,1000,2000,3000) # vector of n values to loop over
for (n in n_values) {
set.seed(123) # set seed for reproducibility
x <- runif(n, min = 0, max = 12) # generate n x 1 column vector of Uniform[0,12] random variable
print(head(x)) # print the first few values of x
}
#Part-b
n_values <- c(2,3,4,5,6,7,8,9,10,15,20,30,50,75,100,250,500,1000,2000,3000) # vector of n values to loop over
for (n in n_values) {
set.seed(123) # set seed for reproducibility
u <- runif(n, min = -4, max = 4) # generate n x 1 column vector of Uniform[-4,4] random variable
print(head(u)) # print the first few values of u
}
#Part-c
n_values <- c(2,3,4,5,6,7,8,9,10,15,20,30,50,75,100,250,500,1000,2000,3000) # vector of n values to loop over
for (n in n_values) {
set.seed(123) # set seed for reproducibility
x <- runif(n, min = 0, max = 12) # generate n x 1 column vector of Uniform[0,12] random variable
u <- runif(n, min = -4, max = 4) # generate n x 1 column vector of Uniform[-4,4] random variable
y <- 3 + 2 * x + u # generate n x 1 column vector of y using the formula yi=3+2xi+ui
print(head(y)) # print the first few values of y
}
#Part-d
n_values <- c(2,3,4,5,6,7,8,9,10,15,20,30,50,75,100,250,500,1000,2000,3000) # vector of n values to loop over
for (n in n_values) {
set.seed(123) # set seed for reproducibility
x <- runif(n, min = 0, max = 12) # generate n x 1 column vector of Uniform[0,12] random variable
u <- runif(n, min = -4, max = 4) # generate n x 1 column vector of Uniform[-4,4] random variable
y <- 3 + 2 * x + u # generate n x 1 column vector of y using the formula yi=3+2xi+ui
# estimate beta using OLS
beta_hat <- cov(x,y)/var(x)
# print the estimated value of beta
print(paste0("For n = ", n, ", beta_hat = ", beta_hat))
}
#Question 4
#Part-a
# Set the sample sizes
ns <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 50, 75, 100, 250, 500, 1000, 2000, 3000)
# Create a list to store the x vectors for each sample size
x_list <- list()
# Generate the x vector for each sample size and store it in the list
for (n in ns) {
x <- runif(n, 0, 12)
x_list[[n]] <- x
}
#Part-b
# Set the sample sizes
ns <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 50, 75, 100, 250, 500, 1000, 2000, 3000)
# Create a list to store the u vectors for each sample size
u_list <- list()
# Generate the u vector for each sample size and store it in the list
for (n in ns) {
u <- runif(n, -4, 4)
u_list[[n]] <- u
}
#Part-c
# Set the sample sizes
ns <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 50, 75, 100, 250, 500, 1000, 2000, 3000)
# Create a list to store the y vectors for each sample size
y_list <- list()
# Generate the y vector for each sample size and store it in the list
for (n in ns) {
# Generate x and u vectors for the current sample size
x <- runif(n, 0, 12)
u <- runif(n, -4, 4)
# Calculate the y vector using the formula yi = 3 + 2xi + ui
y <- 3 + 2*x + u
# Store the y vector in the list
y_list[[n]] <- y
}
#Part-d
# Set the sample sizes
ns <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 50, 75, 100, 250, 500, 1000, 2000, 3000)
# Create a vector to store the OLS estimates of beta for each sample size
beta_ols <- rep(NA, length(ns))
# Estimate the beta OLS for each sample size
for (i in 1:length(ns)) {
# Extract the x and y vectors for the current sample size
x <- runif(ns[i], 0, 12)
u <- runif(ns[i], -4, 4)
y <- 3 + 2*x + u
# Calculate the OLS estimate of beta using the formula Cov(x,y)/Var(x)
beta_ols[i] <- cov(x, y) / var(x)
}
# Save the OLS estimates of beta in memory
save(beta_ols, file = "beta_ols.RData")
#Part-e
# set the sample sizes and number of simulations
n_values <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 50, 75, 100, 250, 500, 1000, 2000, 3000)
num_sims <- 2500
# create a matrix to store the OLS estimates of beta
beta_hat <- matrix(0, nrow = num_sims, ncol = length(n_values))
# loop over sample sizes
for (i in seq_along(n_values)) {
n <- n_values[i]
# repeat the Monte-Carlo simulation num_sims times
for (j in 1:num_sims) {
# generate the data
x <- runif(n, min = 0, max = 12)
u <- runif(n, min = -4, max = 4)
y <- 3 + 2 * x + u
# estimate beta using OLS
beta_hat[j, i] <- cov(x, y) / var(x)
}
}
# part-f
beta_mean <- apply(beta_hat, MARGIN = 2, FUN = mean)
# calculate variance of transformed vectors
beta_var <- apply(beta_hat, MARGIN = 2, FUN = var)
# display mean and variance
data.frame(n = n_values, mean = beta_mean, variance = beta_var)
# create data frame with transformed vectors
beta_df <- data.frame(beta2500 = as.vector(beta_hat), n = rep(n_values, each = 2500))
beta_df<-subset(beta_df,beta_df$n%in%c(5,10,15,20,50,100,500,1000,3000))
# plot histogram of transformed vectors using ggplot2
ggplot(beta_df, aes(x = beta2500)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1, color = "black", fill = "lightblue") +
facet_wrap(~ n, scales = "free_x") +
labs(title = "Histogram of beta2500", x = "Transformed Value", y = "Density")
#Question 5
#Part a
library(data.table)
# load the dataset
vg_data = fread(file = "videogamesales_main.csv",
na.strings = c("NA", ""),
sep = "auto",
stringsAsFactors = FALSE,
data.table = TRUE
)
# create frequency tables
freq_table_platform <- table(vg_data$Platform)
freq_table_genre <- table(vg_data$Genre)
freq_table_rating <- table(vg_data$Rating)
# print the tables
print(freq_table_platform)
print(freq_table_genre)
print(freq_table_rating)
# Load the dataset
vg_sales <- vg_data
# Create categorical variables for platform, genre, and rating
vg_sales[, platform_cat := as.factor(Platform)]
vg_sales[, genre_cat := as.factor(Genre)]
vg_sales[, rating_cat := as.factor(Rating)]
# Create age variable relative to year 2013
vg_sales[, age := 2013 - Year_of_Release]
vg_sales
#Part c
# Run regression with all relevant X variables
model <- lm(Global_Sales ~ Critic_Score + User_Score + platform_cat + genre_cat + rating_cat + age, data = vg_sales)
# Report adjusted R-squared
adj_r_sq <- summary(model)$adj.r.squared
cat("Adjusted R-squared:", adj_r_sq, "\n")
#Part d
# Generate natural logs of selected variables
vg_sales$ln_global_sales <- log(vg_sales$Global_Sales)
vg_sales$ln_critic_score <- log(vg_sales$Critic_Score)
vg_sales$ln_critic_count <- log(vg_sales$Critic_Count)
vg_sales$ln_user_score <- log(vg_sales$User_Score)
vg_sales$ln_user_count <- log(vg_sales$User_Count)
#Part e
# Create a new variable with the natural log of global sales
vg_sales$log_global_sales <- log(vg_sales$Global_Sales)
# Run a linear regression with log global sales as the response variable
# and all other relevant variables as predictors
model1 <- lm(vg_sales$log_global_sales ~ ., data = vg_sales[,c(4:8, 11:14)])
# Report adjusted R-squared
summary(model1)$adj.r.squared
#Part f
# generate log of Y and X variables
vg_sales$log_global_sales <- log(vg_sales$Global_Sales)
vg_sales$log_critic_score <- log(vg_sales$Critic_Score)
vg_sales$log_critic_count <- log(vg_sales$Critic_Count)
vg_sales$log_user_score <- log(vg_sales$User_Score)
vg_sales$log_user_count <- log(vg_sales$User_Count)
# run regression with log of Y and X variables
model2 <- lm(log_global_sales ~ log_critic_score + log_critic_count + log_user_score + log_user_count + platform_cat + genre_cat + rating_cat + age, data=vg_sales)
# report adjusted R-squared
summary(model2)$adj.r.squared
